{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"autoencoder training ","provenance":[],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyNxzDvdm8PcZo3M6kN4KC2q"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard","accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_0Zh8kJy5qPz","executionInfo":{"status":"ok","timestamp":1660973396564,"user_tz":-300,"elapsed":39511,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"f3bb1e54-14df-4094-8a5b-212b73448962"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","import matplotlib.pyplot as plt\n","import cv2\n","from tensorflow.keras.models import load_model\n","from sklearn.model_selection import train_test_split\n","import keras\n","from keras import layers\n","from tensorflow.keras.callbacks import ModelCheckpoint\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.callbacks import LearningRateScheduler"],"metadata":{"id":"ajFFTWss6QDL","executionInfo":{"status":"ok","timestamp":1660973399984,"user_tz":-300,"elapsed":3425,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["def create_dataset(path):\n","    images = []\n","    for dirname, _, filenames in os.walk(path):\n","        for filename in filenames:\n","            image = cv2.imread(os.path.join(dirname, filename))\n","            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","            image = image.astype('float32')\n","            image /= 255.0\n","            images.append(image)\n","    images = np.array(images)\n","    return images"],"metadata":{"id":"QwkH3XoH6arq","executionInfo":{"status":"ok","timestamp":1660973399984,"user_tz":-300,"elapsed":13,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["faces_1 = create_dataset('/content/drive/MyDrive/try1/Faces/faces1/')"],"metadata":{"id":"TyhTRegN6hf3","executionInfo":{"status":"ok","timestamp":1660973463947,"user_tz":-300,"elapsed":63976,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["print(\"Total Faces in sample 1: \",len(faces_1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q8QxW8ha6kVb","executionInfo":{"status":"ok","timestamp":1660973463947,"user_tz":-300,"elapsed":15,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"9ca8b04b-6e24-45b9-d22c-fa42eecaf429"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Total Faces in sample 1:  3576\n"]}]},{"cell_type":"code","source":["X_train_a, X_test_a, y_train_a, y_test_a = train_test_split(faces_1, faces_1, test_size=0.20, random_state=0)"],"metadata":{"id":"FCTmAIm66nbm","executionInfo":{"status":"ok","timestamp":1660973464544,"user_tz":-300,"elapsed":610,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["input_img = layers.Input(shape=(120, 120, 3))\n","x = layers.Conv2D(128,kernel_size=3, strides=2, padding='same',activation='relu')(input_img)\n","x = layers.MaxPooling2D((2, 2), padding='same')(x)\n","x = layers.Conv2D(256,kernel_size=3, strides=2, padding='same',activation='relu')(x)\n","x = layers.MaxPooling2D((2, 2), padding='same')(x)\n","x = layers.Conv2D(512,kernel_size=3, strides=2, padding='same',activation='relu')(x)\n","x = layers.MaxPooling2D((2, 2), padding='same')(x)\n","x = layers.Conv2D(1024,kernel_size=3, strides=2, padding='same',activation='relu')(x)\n","x = layers.MaxPooling2D((2, 2), padding='same')(x)\n","x = layers.Conv2D(2048,kernel_size=3, strides=2, padding='same',activation='relu')(x)\n","x = layers.MaxPooling2D((2, 2), padding='same')(x)\n","x = layers.Flatten()(x)\n","x = layers.Dense(51200)(x)\n","encoded = layers.Reshape((5,5,2048))(x)\n","encoder = keras.Model(input_img, encoded,name=\"encoder\")\n","encoder.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VUVYSVw96wBV","executionInfo":{"status":"ok","timestamp":1660973468064,"user_tz":-300,"elapsed":3522,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"df0183b7-8eec-44e7-fe7a-4f675ec8611e"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"encoder\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 120, 120, 3)]     0         \n","                                                                 \n"," conv2d (Conv2D)             (None, 60, 60, 128)       3584      \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 30, 30, 128)      0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 15, 15, 256)       295168    \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 8, 8, 256)        0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 4, 4, 512)         1180160   \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 2, 2, 512)        0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 1, 1, 1024)        4719616   \n","                                                                 \n"," max_pooling2d_3 (MaxPooling  (None, 1, 1, 1024)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_4 (Conv2D)           (None, 1, 1, 2048)        18876416  \n","                                                                 \n"," max_pooling2d_4 (MaxPooling  (None, 1, 1, 2048)       0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 2048)              0         \n","                                                                 \n"," dense (Dense)               (None, 51200)             104908800 \n","                                                                 \n"," reshape (Reshape)           (None, 5, 5, 2048)        0         \n","                                                                 \n","=================================================================\n","Total params: 129,983,744\n","Trainable params: 129,983,744\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["decoder_input= layers.Input(shape=((5,5,2048)))\n","x = layers.Conv2D(2048,kernel_size=3, strides=2, padding='same',activation='relu')(decoder_input)\n","x = layers.UpSampling2D((2, 2))(x)\n","x = layers.Conv2D(1024,kernel_size=3, strides=2, padding='same',activation='relu')(x)\n","x = layers.UpSampling2D((2, 2))(x)\n","x = layers.Conv2D(512,kernel_size=3, strides=2, padding='same',activation='relu')(x)\n","x = layers.UpSampling2D((2, 2))(x)\n","x = layers.Conv2D(256,kernel_size=3, strides=2, padding='same',activation='relu')(x)\n","x = layers.UpSampling2D((2, 2))(x)\n","x = layers.Conv2D(128,kernel_size=3, strides=2, padding='same',activation='relu')(x)\n","x = layers.Flatten()(x)\n","x = layers.Dense(43200)(x)\n","decoded = layers.Reshape((120, 120, 3))(x)\n","decoder = keras.Model(decoder_input, decoded,name=\"decoder\")\n","decoder.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_LWHqMI97tZ1","executionInfo":{"status":"ok","timestamp":1660973468065,"user_tz":-300,"elapsed":24,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"4459a0f4-2b7b-4dbc-c5ec-aa7388f088da"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"decoder\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_2 (InputLayer)        [(None, 5, 5, 2048)]      0         \n","                                                                 \n"," conv2d_5 (Conv2D)           (None, 3, 3, 2048)        37750784  \n","                                                                 \n"," up_sampling2d (UpSampling2D  (None, 6, 6, 2048)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_6 (Conv2D)           (None, 3, 3, 1024)        18875392  \n","                                                                 \n"," up_sampling2d_1 (UpSampling  (None, 6, 6, 1024)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_7 (Conv2D)           (None, 3, 3, 512)         4719104   \n","                                                                 \n"," up_sampling2d_2 (UpSampling  (None, 6, 6, 512)        0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_8 (Conv2D)           (None, 3, 3, 256)         1179904   \n","                                                                 \n"," up_sampling2d_3 (UpSampling  (None, 6, 6, 256)        0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_9 (Conv2D)           (None, 3, 3, 128)         295040    \n","                                                                 \n"," flatten_1 (Flatten)         (None, 1152)              0         \n","                                                                 \n"," dense_1 (Dense)             (None, 43200)             49809600  \n","                                                                 \n"," reshape_1 (Reshape)         (None, 120, 120, 3)       0         \n","                                                                 \n","=================================================================\n","Total params: 112,629,824\n","Trainable params: 112,629,824\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["auto_input = layers.Input(shape=(120,120,3))\n","encoded = encoder(auto_input)\n","decoded = decoder(encoded)\n","#lr_schedule = keras.optimizers.schedules.ExponentialDecay( initial_learning_rate=1e-5, decay_steps=10000,  decay_rate=0.9)\n"," \n","autoencoder = keras.Model(auto_input, decoded,name=\"autoencoder\")\n","autoencoder.compile(optimizer=keras.optimizers.Adam(lr=1e-5, beta_1=0.5, beta_2=0.999) , loss='binary_crossentropy')\n","autoencoder.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fxrL0oEy66e_","executionInfo":{"status":"ok","timestamp":1660973468473,"user_tz":-300,"elapsed":421,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"7666848b-1f28-42d8-e825-cf2606844aa1"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"autoencoder\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_3 (InputLayer)        [(None, 120, 120, 3)]     0         \n","                                                                 \n"," encoder (Functional)        (None, 5, 5, 2048)        129983744 \n","                                                                 \n"," decoder (Functional)        (None, 120, 120, 3)       112629824 \n","                                                                 \n","=================================================================\n","Total params: 242,613,568\n","Trainable params: 242,613,568\n","Non-trainable params: 0\n","_________________________________________________________________\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"code","source":["#checkpoint1 = ModelCheckpoint(\"/content/drive/MyDrive/try1/deepfake_model_5_layers.hdf5\", monitor='val_loss', verbose=1,save_best_only=True, mode='auto', period=1)\n","#history1 = autoencoder.fit(X_train_a, X_train_a,epochs=500,batch_size=16,shuffle=True,validation_data=(X_test_a, X_test_a),callbacks=[checkpoint1])"],"metadata":{"id":"Wss5BHm18Hpl","executionInfo":{"status":"ok","timestamp":1660973468473,"user_tz":-300,"elapsed":3,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["plt.plot(history1.history['loss'])\n","plt.plot(history1.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train_loss', 'val_loss'], loc='upper right')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"UixIkwebsxEY","executionInfo":{"status":"error","timestamp":1660973468898,"user_tz":-300,"elapsed":428,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"960b9a0a-2fc0-4bab-a0f3-1dc54ac2885c"},"execution_count":11,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-f206ba135837>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'val_loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'model loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'epoch'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'history1' is not defined"]}]},{"cell_type":"code","source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","import matplotlib.image as mpimg\n","img = mpimg.imread('/content/drive/MyDrive/FYDP/Faces/Muaz/1.jpg')\n","imgplot = plt.imshow(img)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"WkIcBlsd7zwX","executionInfo":{"status":"ok","timestamp":1660973494525,"user_tz":-300,"elapsed":15025,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"6836c387-e17c-4ef5-81e0-34d2b4093118"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["autoencoder_a = load_model('/content/drive/MyDrive/try1/deepfake_model_5_layers.hdf5')"],"metadata":{"id":"-FNZfLZ770jI","executionInfo":{"status":"ok","timestamp":1660973520482,"user_tz":-300,"elapsed":22024,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["img = mpimg.imread('/content/drive/MyDrive/FYDP/Faces/Muaz/1.jpg')"],"metadata":{"id":"WyCjAAlvvFYm","executionInfo":{"status":"ok","timestamp":1660973986055,"user_tz":-300,"elapsed":5,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["output= plt.imshow(autoencoder_a.predict(img))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":588},"id":"yZgKBVnnvTnh","executionInfo":{"status":"error","timestamp":1660974099410,"user_tz":-300,"elapsed":385,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"dd7141a2-4fa9-4b11-dc35-80339563da06"},"execution_count":19,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-e66dd9f32126>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0moutput\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mautoencoder_a\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mautograph_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1145\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1146\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ag_error_metadata\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1147\u001b[0;31m               \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1148\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1149\u001b[0m               \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1801, in predict_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1790, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1783, in run_step  **\n        outputs = model.predict_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1751, in predict_step\n        return self(x, training=False)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 67, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/input_spec.py\", line 264, in assert_input_compatibility\n        raise ValueError(f'Input {input_index} of layer \"{layer_name}\" is '\n\n    ValueError: Input 0 of layer \"autoencoder\" is incompatible with the layer: expected shape=(None, 120, 120, 3), found shape=(None, 120, 3)\n"]}]}]}