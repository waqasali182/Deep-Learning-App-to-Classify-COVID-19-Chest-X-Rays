{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"pytorch_practice","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPD5p/J9ai0oqg35l96Q0j/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gV8LhCiFztQV","executionInfo":{"status":"ok","timestamp":1657364094046,"user_tz":-300,"elapsed":3915,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"c54b0eae-45a1-423e-f797-2de431894290"},"outputs":[{"output_type":"stream","name":"stdout","text":["GPU avialable: False\n"]}],"source":["#Import librarires\n","\n","#Torchvision is used to get out dataset and for useful image transformations\n","import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","\n","#We import Pytoch optimization library (optim), and neural networks\n","# nn is used for the basic building block for our neural network\n","\n","import torch.optim as optim\n","import torch.nn as nn\n","\n","print(\"GPU avialable: {}\".format(torch.cuda.is_available()))"]},{"cell_type":"code","source":["# We always want to normalize and standardize the data in for our deep learning libraries\n","# Not necessray but a good practice to normalize\n","\n","\n","transform = transforms.Compose([transforms.ToTensor(),\n","                               transforms.Normalize((0.5,), (0.5, )) ]) # the function normalizes to -1 and 1"],"metadata":{"id":"4JmDLqvc1bzG","executionInfo":{"status":"ok","timestamp":1657353228174,"user_tz":-300,"elapsed":8,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["#Fetching the dataset from TORCHVISION\n","\n","trainset = torchvision.datasets.MNIST('mnist',\n","                                     train=True,\n","                                     download=True,\n","                                     transform = transform)\n","\n","testset = torchvision.datasets.MNIST('mnist',\n","                                    train = False,\n","                                    download = True,\n","                                    transform = transform)"],"metadata":{"id":"-QcwoWbGCq8Z","executionInfo":{"status":"ok","timestamp":1657353228175,"user_tz":-300,"elapsed":9,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["print(trainset.data[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eUm2cW6hZQE-","executionInfo":{"status":"ok","timestamp":1657353228175,"user_tz":-300,"elapsed":9,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"e28064bc-b488-4bd9-f4bc-ebb6382b8b90"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,  18,\n","          18,  18, 126, 136, 175,  26, 166, 255, 247, 127,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,  30,  36,  94, 154, 170, 253,\n","         253, 253, 253, 253, 225, 172, 253, 242, 195,  64,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,  49, 238, 253, 253, 253, 253, 253,\n","         253, 253, 253, 251,  93,  82,  82,  56,  39,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,  18, 219, 253, 253, 253, 253, 253,\n","         198, 182, 247, 241,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,  80, 156, 107, 253, 253, 205,\n","          11,   0,  43, 154,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   1, 154, 253,  90,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 139, 253, 190,\n","           2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11, 190, 253,\n","          70,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  35, 241,\n","         225, 160, 108,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  81,\n","         240, 253, 253, 119,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","          45, 186, 253, 253, 150,  27,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,  16,  93, 252, 253, 187,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,   0,   0, 249, 253, 249,  64,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","          46, 130, 183, 253, 253, 207,   2,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  39, 148,\n","         229, 253, 253, 253, 250, 182,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24, 114, 221, 253,\n","         253, 253, 253, 201,  78,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,  23,  66, 213, 253, 253, 253,\n","         253, 198,  81,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,  18, 171, 219, 253, 253, 253, 253, 195,\n","          80,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,  55, 172, 226, 253, 253, 253, 253, 244, 133,  11,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0, 136, 253, 253, 253, 212, 135, 132,  16,   0,   0,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n","        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]],\n","       dtype=torch.uint8)\n"]}]},{"cell_type":"code","source":["import cv2\n","import numpy as np\n","from matplotlib import pyplot as plt\n","\n","#Define the imshow function\n","\n","def imgshow(title=\"\", image=None, size=6):\n","  w, h = image.shape[0], image.shape[1]\n","  ar = w/h\n","  plt.figure(figsize=(size*ar, size))\n","  plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n","  plt.title(title)\n","  plt.show()\n","\n","image = trainset.data[49].numpy()\n","imgshow(\"MNIST SAMPLE\", image=image)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":390},"id":"_4b4PkiyV7Ux","executionInfo":{"status":"ok","timestamp":1657353228175,"user_tz":-300,"elapsed":5,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"c0021c38-7614-4095-d342-75dfef5c220b"},"execution_count":74,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x432 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["num_images = 50\n","x=list()\n","\n","for index in range(1, num_images+1):\n","  plt.subplot(5, 10, index)\n","  plt.axis('off')\n","  plt.imshow(trainset.data[index-1], cmap='gray_r')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":239},"id":"6YDh34QjbbLO","executionInfo":{"status":"ok","timestamp":1657353229754,"user_tz":-300,"elapsed":1583,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"827e3fd8-a96e-4ec3-9573-bf2ceff21509"},"execution_count":75,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 50 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Prepare train and test loader\n","\n","trainloader = torch.utils.data.DataLoader(trainset,\n","                                          batch_size = 128,\n","                                          shuffle = True,\n","                                          num_workers = 0)\n","\n","testloader = torch.utils.data.DataLoader(testset,\n","                                         batch_size = 128,\n","                                         shuffle = True,\n","                                         num_workers = 0)"],"metadata":{"id":"WIwL2gnUohXh","executionInfo":{"status":"ok","timestamp":1657353229754,"user_tz":-300,"elapsed":6,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["data_iter = iter (trainloader)\n","\n","images, labels = data_iter.next()\n"],"metadata":{"id":"ubfrRKv-qIbf","executionInfo":{"status":"ok","timestamp":1657353229754,"user_tz":-300,"elapsed":6,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["print(images.shape, labels.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m1GJR7RcwJQ3","executionInfo":{"status":"ok","timestamp":1657353229754,"user_tz":-300,"elapsed":6,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"9cea2aa0-ab21-4418-ab6b-0e02fdd67234"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([128, 1, 28, 28]) torch.Size([128])\n"]}]},{"cell_type":"code","source":["import torch.nn as nn #Used to create the CNN\n","import torch.nn.functional as F\n","\n","#We create the model using python class\n","\n","class Net (nn.Module):\n","  def __init__(self):\n","    # super is a subclass of nn.Module that inherits all it's methods\n","    super(Net, self).__init__()\n","\n","    #We define our layers\n","    self.conv1 = nn.Conv2d(1, 32, 3)\n","    self.conv2 = nn.Conv2d(32, 64, 3)\n","    self.pool = nn.MaxPool2d(2, 2)\n","    self.fc1 = nn.Linear(64 * 12 * 12, 128) #Flatten\n","    self.fc2 = nn.Linear (128, 10)\n","\n","  def forward (self, x):\n","    # Here we define pur forward propagation sequence\n","    #Note that it is: Conv1 - ReLu - Conv2 - ReLu - MaxPool - Flatten - FC1 - FC2\n","\n","    x = self.pool(F.relu(self.conv2(F.relu(self.conv1(x)))))\n","    x = x.view (-1, 64 * 12 * 12)\n","    x= F.relu(self.fc2(F.relu(self.fc1(x))))\n","    return x"],"metadata":{"id":"6lQQWkG8w6Uw","executionInfo":{"status":"ok","timestamp":1657354518354,"user_tz":-300,"elapsed":495,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":81,"outputs":[]},{"cell_type":"code","source":["net = Net()\n","device = 'cuda'\n","net.to(device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Wcbn_1tC8oP","executionInfo":{"status":"ok","timestamp":1657354877511,"user_tz":-300,"elapsed":11418,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}},"outputId":"344d54a7-b498-45a2-b482-a07e2a2ddaf1"},"execution_count":82,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Net(\n","  (conv1): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1))\n","  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))\n","  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  (fc1): Linear(in_features=9216, out_features=128, bias=True)\n","  (fc2): Linear(in_features=128, out_features=10, bias=True)\n",")"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["# We define the loss function and optimizer\n","\n","import torch.optim as optim\n","\n","# we use Cross Entropy Loss as our loss function\n","criterion = nn.CrossEntropyLoss()\n","\n","# As optimizer, we use SGD (Stochastic Gradient Descent), learning rate of 0.001 and momentum of 0.9\n","optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)"],"metadata":{"id":"GSGV28lEJSNO","executionInfo":{"status":"ok","timestamp":1657356645945,"user_tz":-300,"elapsed":621,"user":{"displayName":"Waqas Ali","userId":"11561624346232245804"}}},"execution_count":83,"outputs":[]},{"cell_type":"markdown","source":["## Training the Data"],"metadata":{"id":"utBVXPXQJ3kQ"}},{"cell_type":"code","source":["epochs = 10\n","\n","epoch_log = []\n","loss_log = []\n","accuracy_log = []\n","\n","for epoch in range(epochs):\n","  print(f'Starting epoch: {epoch+1}...')\n","\n","  running_loss=0.0\n","\n","  # We iterate thorugh our trainloader iterator\n","  for i, data in enumerate(trainloader, 0):\n","    # Note that data is list of [inputs, labels]\n","    inputs, labels = data\n","\n","    inputs=inputs.to(device)\n","    labels=labels.to(device)\n","\n","    # Clear the gradients before training by setting to 0, which is required for fresh start\n","    optimizer.zero_grad()\n","\n","    # Forward -> Backprop + optimize\n","    outputs = net(inputs) #Forward Propagation\n","    loss = criterion(outputs, labels) #Get Loss (quantify the results between resulst and predictions)\n","    loss.backward() # Back propagate to obtain to obtain the new gradients for all nodes\n","    optimizer.step() # Update the gradients/weights\n","\n","    # Print Training Statistics - Epoch/Iterations/Loss/Accuracy\n","\n","    running_loss += loss.item()\n","    if i % 50 == 49:    # Show our loss every 50 mini-batches\n","      correct = 0 # Initialize our variable to hold the count for the correct predictions\n","      total = 0 #Initialize our variable to hold the count of the number of labels iterated\n","\n","      #We do not need gradients for validation, so wrap in and no_grad to save memory\n","\n","      with torch.no_grad()\n","        # iterate through the testloader iterator\n","\n","        for data in testloader:\n","          images, labels = data\n","          images = images.to(device)\n","          labels = lables.t0(device)\n","\n","          #Forward propagate the testdata batch through our model\n","          outputs = net(images)\n","\n","          #Get predictions from maximum value of the predicted output tensor\n","          # we set dim = 1 as it specifies the number of dimensions to reduce\n","          _, predicted = torch.max(outputs.data, dim = 1)\n","          # Keep adding the label size or length to the total variable\n","          total += (predicted == labels).sum().item()\n","\n","        accuracy = 100 * correct / total\n","        epoch_num = epoch + 1\n","        actual_loss = running_loss / 50\n","        print(f'Epoch: {epoch_num}, Mini-Batches completed: {(i+1)}, Loss: {actual_loss:.3f}, Test Accuracy: {accuracy:.3f}%')\n","        running_loss = 0.0\n","\n","  #Store training stats after each epoch\n","  epoch_log.append(epoch_num)\n","  loss_log.append(actual_loss)\n","  accuracy_log.append(accuracy)\n","\n","print(\"Finished Training\")       \n","\n"],"metadata":{"id":"1VQoMrIxX36U"},"execution_count":null,"outputs":[]}]}